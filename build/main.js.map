{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport { ChargerController } from \"./ChargerController\";\n\nclass SonnenCharger extends utils.Adapter {\n\n\tprivate chargerController : ChargerController;\n\tprivate timer: NodeJS.Timeout | undefined;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"sonnen-charger\",\n\t\t});\n\n\t\tthis.chargerController = new ChargerController();\n\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState(\"info.connection\", true, true);\n\n\t\t// check configuration\n\t\tif (!this.config.serverIp) {\n\t\t\tthis.log.error(\"Server IP is empty - please check instance configuration\")\n\t\t\treturn;\n\t\t}\n\t\tif (!this.config.serverPort) {\n\t\t\tthis.log.error(\"Server port is empty - please check instance configuration\")\n\t\t\treturn;\n\t\t}\n\t\tif (!this.config.interval) {\n\t\t\tthis.log.error(\"interval is empty - please check instance configuration\")\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log.info(\"config serverIp: \" + this.config.serverIp);\n\t\tthis.log.info(\"config serverPort: \" + this.config.serverPort);\n\t\tthis.log.info(\"config interval: \" + this.config.interval);\n\n\t\tthis.log.info(\"conncet to modbus\");\n\n\t\tthis.chargerController.connect( this.config.serverIp, this.config.serverPort);\n\n\t\t// TODO loop over numberOf Connctors\n\t\tthis.createChargerConnectorInfoObjects(1);\n\t\tthis.createChargerConnectorMeasurementObjects(1);\n\n\t\tthis.timer = setInterval(async () => {\n\t\t\tawait this.updateChargerData();\n\t\t  }, this.config.interval * 1000);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\n\t\t\t// Reset the connection indicator during shutdown\n\t\t\tthis.setState(\"info.connection\", false, true);\n\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\n\t\t\tclearInterval(this.timer);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tprivate async updateChargerData(): Promise<void> {\n\n\t\t//TODO nur nach Initialisierung\n\t\tthis.updateChargerInfoData();\n\n\t\t//TODO loop\n\t\tthis.updateChargerConnectorInfoData(1);\n\t\tthis.updateChargerConnectorMeasurementObjects(1);\n\t}\n\n\n\tprivate async updateChargerInfoData(): Promise<void> {\n\n\t\tthis.log.info(\"updateChargerInfoData\");\n\n\t\tconst infoData = await this.chargerController.fetchChargerInfoData();\n\t\tthis.setState(\"chargerSettings.serialNumber\", infoData.getSerialNumber(), true);\n\t\tthis.setState(\"chargerSettings.model\", infoData.getModel(), true);\n\t\tthis.setState(\"chargerSettings.hwVersion\", infoData.getHardwareVersion(), true);\n\t\tthis.setState(\"chargerSettings.swVersion\", infoData.getSoftwareVersion(), true);\n\t\tthis.setState(\"chargerSettings.numberOfConnectors\", infoData.getNumberOfConnectors(), true);\n\t}\n\n\tprivate async createChargerConnectorInfoObjects(num : number): Promise<void> {\n\n\t\tthis.log.info(\"createChargerConnectorInfoObjects for connector \"+num);\n\n\t\tawait this.setObjectNotExistsAsync(\"chargerSettings.connectors.\"+num, {\n\t\t\ttype: \"channel\",\n\t\t\tcommon: {\n\t\t\t\tname: \"todo\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"chargerSettings.connectors.\"+num+\".connectorType\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Connector type\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"chargerSettings.connectors.\"+num+\".numberOfPhases\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Number phases\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"chargerSettings.connectors.\"+num+\".l1ConnectedToPhase\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"L1 connected to phase\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"chargerSettings.connectors.\"+num+\".l2ConnectedToPhase\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"L2 connected to phase\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"chargerSettings.connectors.\"+num+\".l3ConnectedToPhase\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"L3 connected to phase\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"chargerSettings.connectors.\"+num+\".customMaxCurrent\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Custom max current\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"A\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\t}\n\n\tprivate async updateChargerConnectorInfoData(num : number): Promise<void> {\n\n\t\tthis.log.info(\"updateChargerConnectorInfoData for connector \"+num);\n\n\t\tconst infoData = await this.chargerController.fetchConnectorInfoData(num);\n\t\tthis.setState(\"chargerSettings.connectors.\"+num+\".connectorType\", infoData.getConnectorTypeAsString(), true);\n\t\tthis.setState(\"chargerSettings.connectors.\"+num+\".numberOfPhases\", infoData.getNumberOfPhases(), true);\n\t\tthis.setState(\"chargerSettings.connectors.\"+num+\".l1ConnectedToPhase\", infoData.getL1ConnectedToPhase(), true);\n\t\tthis.setState(\"chargerSettings.connectors.\"+num+\".l2ConnectedToPhase\", infoData.getL2ConnectedToPhase(), true);\n\t\tthis.setState(\"chargerSettings.connectors.\"+num+\".l3ConnectedToPhase\", infoData.getL3ConnectedToPhase(), true);\n\t\tthis.setState(\"chargerSettings.connectors.\"+num+\".customMaxCurrent\", infoData.getCustomMaxCurrent(), true);\n\t}\n\n\tprivate async createChargerConnectorMeasurementObjects(num : number): Promise<void> {\n\n\t\tthis.log.info(\"createChargerConnectorMeasurementObjects for connector \"+num);\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num, {\n\t\t\ttype: \"channel\",\n\t\t\tcommon: {\n\t\t\t\tname: \"measurements\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".connectorStatus\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Connnector status id\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".connectorStatusLabel\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Connnector status\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".measuredVehicleNumberOfPhases\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Measured vehicle number of phases id\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".measuredVehicleNumberOfPhasesLabel\",{\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Measured vehicle number of phases\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".evMaxPhaseCurrent\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"EV max phase current\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"A\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".targetCurrentFromPowerMgm\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Target current from power mgm or modbus\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"A\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".frequency\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Frequency\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"Hz\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".voltageL1\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"L-N voltage (L1)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"V\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".voltageL2\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"L-N voltage (L2)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"V\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".voltageL3\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"L-N voltage (L3)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"V\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".currentL1\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Curent (L1)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"A\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".currentL2\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Curent (L2)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"A\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".currentL3\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Curent (L3)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"A\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".activePowerL1\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Active power (L1)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"kW\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".activePowerL2\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Active power (L2)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"kW\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".activePowerL3\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Active power (L3)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"kW\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".activePowerTotal\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Active power (total)\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"kW\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".powerFactor\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Power factor\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".totalImportedActiveEnergyInRunningSession\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Total imported active energy in running session\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"kWh\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".runningSessionDuration\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Running session duration\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"s\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".runningSessionDepartureTime\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Running session departure time\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"s\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".runningSessionID\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Running session ID\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".evMaxPower\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"EV max power\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"kW\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tawait this.setObjectNotExistsAsync(\"measurements.\"+num+\".evPlannedEnergy\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"EV planned energy\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"value\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"kWh\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t}\n\n\tprivate async updateChargerConnectorMeasurementObjects(num : number): Promise<void> {\n\n\t\tthis.log.info(\"updateChargerConnectorMeasurementObjects for connector \"+num);\n\n\t\tconst infoData = await this.chargerController.fetchConnectorMeasurementData(num);\n\t\tthis.setState(\"measurements.\"+num+\".connectorStatus\", infoData.getConnectorStatus(), true);\n\t\tthis.setState(\"measurements.\"+num+\".connectorStatusLabel\", infoData.getConnectorStatusAsString(), true);\n\t\tthis.setState(\"measurements.\"+num+\".measuredVehicleNumberOfPhases\", infoData.getMeasuredVehicleNumberOfPhases(), true);\n\t\tthis.setState(\"measurements.\"+num+\".measuredVehicleNumberOfPhasesLabel\", infoData.getMeasuredVehicleNumberOfPhasesAsString(), true);\n\t\tthis.setState(\"measurements.\"+num+\".evMaxPhaseCurrent\", infoData.getEvMaxPhaseCurrent(), true);\n\t\tthis.setState(\"measurements.\"+num+\".targetCurrentFromPowerMgm\", infoData.getTargetCurrentFromPowerMgm(), true);\n\t\tthis.setState(\"measurements.\"+num+\".frequency\", infoData.getFrequency(), true);\n\t\tthis.setState(\"measurements.\"+num+\".voltageL1\", infoData.getVoltageL1(), true);\n\t\tthis.setState(\"measurements.\"+num+\".voltageL2\", infoData.getVoltageL2(), true);\n\t\tthis.setState(\"measurements.\"+num+\".voltageL3\", infoData.getVoltageL3(), true);\n\t\tthis.setState(\"measurements.\"+num+\".currentL1\", infoData.getCurrentL1(), true);\n\t\tthis.setState(\"measurements.\"+num+\".currentL2\", infoData.getCurrentL2(), true);\n\t\tthis.setState(\"measurements.\"+num+\".currentL3\", infoData.getCurrentL3(), true);\n\t\tthis.setState(\"measurements.\"+num+\".activePowerL1\", infoData.getActivePowerL1(), true);\n\t\tthis.setState(\"measurements.\"+num+\".activePowerL2\", infoData.getActivePowerL2(), true);\n\t\tthis.setState(\"measurements.\"+num+\".activePowerL3\", infoData.getActivePowerL3(), true);\n\t\tthis.setState(\"measurements.\"+num+\".activePowerTotal\", infoData.getActivePowerTotal(), true);\n\t\tthis.setState(\"measurements.\"+num+\".powerFactor\", infoData.getPowerFactor(), true);\n\t\tthis.setState(\"measurements.\"+num+\".totalImportedActiveEnergyInRunningSession\", infoData.getTotalImportedActiveEnergyInRunningSession(), true);\n\t\tthis.setState(\"measurements.\"+num+\".runningSessionDuration\", infoData.getRunningSessionDuration(), true);\n\t\tthis.setState(\"measurements.\"+num+\".runningSessionDepartureTime\", infoData.getRunningSessionDepartureTime(), true);\n\t\tthis.setState(\"measurements.\"+num+\".runningSessionID\", infoData.getRunningSessionID(), true);\n\t\tthis.setState(\"measurements.\"+num+\".evMaxPower\", infoData.getEvMaxPower(), true);\n\t\tthis.setState(\"measurements.\"+num+\".evPlannedEnergy\", infoData.getEvPlannedEnergy(), true);\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SonnenCharger(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new SonnenCharger())();\n}\n"],
  "mappings": "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",
  "names": []
}
