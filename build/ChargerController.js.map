{
  "version": 3,
  "sources": ["../src/ChargerController.ts"],
  "sourcesContent": ["import { ModbusTCPClient } from \"jsmodbus\"\r\nimport { Socket, SocketConnectOpts } from \"net\"\r\n\r\nimport { ChargerInfoData } from \"./ChargerInfoData\";\r\nimport { ChargerConnectorInfoData } from \"./ChargerConnectorInfoData\";\r\nimport { ChargerConnectorMeasurementData } from \"./ChargerConnectorMeasurementData\";\r\nimport { RegisterConverterUtil } from \"./RegisterConverterUtil\";\r\n\r\nclass ChargerController {\r\n\r\n\tprivate socket : Socket;\r\n\tprivate client : ModbusTCPClient;\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.socket = new Socket();\r\n\t\tthis.client = new ModbusTCPClient(this.socket);\r\n\t}\r\n\r\n\tpublic connect(ipAddress : string, port : number, callback: () => void) : void {\r\n\r\n\t\tconst options: SocketConnectOpts = {\r\n\t\t\t\"host\": ipAddress,\r\n\t\t\t\"port\": port\r\n\t\t};\r\n\r\n\t\tthis.socket.on(\"connect\", callback);\r\n\r\n\t\tthis.socket.connect(options);\r\n\t}\r\n\r\n\tpublic async fetchChargerInfoData(callback: (data : ChargerInfoData) => void) : Promise<void>\r\n\t{\r\n\t\tthis.client.readInputRegisters(990, 31)\r\n\t\t\t.then(function (resp) {\r\n\r\n\t\t\t\tconst data = new ChargerInfoData();\r\n\t\t\t\tconst registerData : number[] | Buffer | Uint16Array = resp.response.body.values;\r\n\t\t\t\tdata.setSerialNumber(RegisterConverterUtil.getRegisterDataAsString(registerData, 0, 10));\r\n\t\t\t\tdata.setModel(RegisterConverterUtil.getRegisterDataAsString(registerData, 10, 10));\r\n\t\t\t\tdata.setHardwareVersion(RegisterConverterUtil.getRegisterDataAsString(registerData, 20, 5));\r\n\t\t\t\tdata.setSoftwareVersion(RegisterConverterUtil.getRegisterDataAsString(registerData, 25, 5));\r\n\t\t\t\tdata.setNumberOfConnectors(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 30));\r\n\r\n\t\t\t\tcallback(data);\r\n\t\t\t})\r\n\t\t\t.catch(function (...args) {\r\n\t\t\t\tconsole.error(args);\r\n\t\t\t})\r\n\t}\r\n\r\n\tpublic async fetchConnectorInfoData(num : number, callback: (num : number, data : ChargerConnectorInfoData) => void) : Promise<void>\r\n\t{\r\n\t\tthis.client.readInputRegisters(1022 + (num-1) * 100, 8)\r\n\t\t\t.then(function (resp) {\r\n\r\n\t\t\t\tconst data = new ChargerConnectorInfoData();\r\n\t\t\t\tconst registerData : number[] | Buffer | Uint16Array = resp.response.body.values;\r\n\r\n\t\t\t\tdata.setConnectorType(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 0));\r\n\t\t\t\tdata.setNumberOfPhases(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 1));\r\n\t\t\t\tdata.setL1ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 2));\r\n\t\t\t\tdata.setL2ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 3));\r\n\t\t\t\tdata.setL3ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 4));\r\n\t\t\t\tdata.setCustomMaxCurrent(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 6));\r\n\r\n\t\t\t\tcallback(num, data);\r\n\t\t\t})\r\n\t\t\t.catch(function (...args) {\r\n\t\t\t\tconsole.error(args);\r\n\t\t\t})\r\n\t}\r\n\r\n\tpublic async fetchConnectorMeasurementData(num : number, callback: (num : number, data : ChargerConnectorMeasurementData) => void) : Promise<void>\r\n\t{\r\n\t\tthis.client.readInputRegisters(0 + (num-1) * 100, 48)\r\n\t\t\t.then(function (resp) {\r\n\r\n\t\t\t\tconst data = new ChargerConnectorMeasurementData();\r\n\t\t\t\tconst registerData : number[] | Buffer | Uint16Array = resp.response.body.values;\r\n\r\n\t\t\t\tdata.setConnectorStatus(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 0));\r\n\t\t\t\tdata.setMeasuredVehicleNumberOfPhases(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 1));\r\n\t\t\t\tdata.setEvMaxPhaseCurrent(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 2));\r\n\t\t\t\tdata.setTargetCurrentFromPowerMgm(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 4));\r\n\t\t\t\tdata.setFrequency(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 6));\r\n\t\t\t\tdata.setVoltageL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 8));\r\n\t\t\t\tdata.setVoltageL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 10));\r\n\t\t\t\tdata.setVoltageL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 12));\r\n\t\t\t\tdata.setCurrentL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 14));\r\n\t\t\t\tdata.setCurrentL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 16));\r\n\t\t\t\tdata.setCurrentL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 18));\r\n\t\t\t\tdata.setActivePowerL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 20));\r\n\t\t\t\tdata.setActivePowerL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 22));\r\n\t\t\t\tdata.setActivePowerL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 24));\r\n\t\t\t\tdata.setActivePowerTotal(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 26));\r\n\t\t\t\tdata.setPowerFactor(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 28));\r\n\t\t\t\tdata.setTotalImportedActiveEnergyInRunningSession(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 30));\r\n\t\t\t\tdata.setRunningSessionDuration(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 32));\r\n\t\t\t\tdata.setRunningSessionDepartureTime(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 36));\r\n\t\t\t\tdata.setRunningSessionID(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 40));\r\n\t\t\t\tdata.setEvMaxPower(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 44));\r\n\t\t\t\tdata.setEvPlannedEnergy(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 46));\r\n\r\n\t\t\t\tcallback(num, data);\r\n\t\t\t})\r\n\t\t\t.catch(function (...args) {\r\n\t\t\t\tconsole.error(args);\r\n\t\t\t})\r\n\t}\r\n\r\n\tpublic async commandStopCharging(connectorNum : number) : Promise<void> {\r\n\t\tthis.client.writeSingleRegister(1 + (connectorNum-1) * 100, 0);\r\n\t}\r\n\r\n\tpublic async commandPauseCharging(connectorNum : number) : Promise<void> {\r\n\t\tthis.client.writeSingleRegister(2 + (connectorNum-1) * 100, 0);\r\n\t}\r\n\r\n\tpublic async commandSetDepartureTime(connectorNum : number, value : number) : Promise<void> {\r\n\t\tconst int16Array : number[] = RegisterConverterUtil.int64ToInt16Array(value);\r\n\t\tthis.client.writeMultipleRegisters(4 + (connectorNum-1) * 100, int16Array);\r\n\t}\r\n\tpublic async commandSetCurrentSetpoint(connectorNum : number, value : number) : Promise<void> {\r\n\t\tconst int16Array : number[] = RegisterConverterUtil.float32ToInt16Array(value);\r\n\t\tthis.client.writeMultipleRegisters(8 + (connectorNum-1) * 100, int16Array);\r\n\t}\r\n\r\n\tpublic async commandCancelCurrentSetpoint(connectorNum : number) : Promise<void> {\r\n\t\tthis.client.writeSingleRegister(10 + (connectorNum-1) * 100, 0);\r\n\t}\r\n\r\n\tpublic async commandSetPowerSetpoint(connectorNum : number, value : number) : Promise<void> {\r\n\t\tconst int16Array : number[] = RegisterConverterUtil.float32ToInt16Array(value);\r\n\t\tthis.client.writeMultipleRegisters(11 + (connectorNum-1) * 100, int16Array);\r\n\t}\r\n\r\n\tpublic async commandCancelPowerSetpoint(connectorNum : number) : Promise<void> {\r\n\t\tthis.client.writeSingleRegister(13 + (connectorNum-1) * 100, 0);\r\n\t}\r\n\r\n\tpublic async commandRestart() : Promise<void> {\r\n\t\tthis.client.writeSingleRegister(1004, 0);\r\n\t}\r\n\r\n\tpublic async commandSetTime(value : number) : Promise<void> {\r\n\t\tconst int16Array : number[] = RegisterConverterUtil.int64ToInt16Array(value);\r\n\t\tthis.client.writeMultipleRegisters(1000, int16Array);\r\n\t}\r\n\r\n}\r\n\r\nexport { ChargerController };"],
  "mappings": "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",
  "names": []
}
