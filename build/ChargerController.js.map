{
  "version": 3,
  "sources": ["../src/ChargerController.ts"],
  "sourcesContent": ["import { ModbusTCPClient } from \"jsmodbus\"\r\nimport { Socket, SocketConnectOpts } from \"net\"\r\n\r\nimport { ChargerInfoData } from \"./ChargerInfoData\";\r\nimport { ChargerConnectorInfoData } from \"./ChargerConnectorInfoData\";\r\nimport { ChargerConnectorMeasurementData } from \"./ChargerConnectorMeasurementData\";\r\nimport  {RegisterConverterUtil } from \"./RegisterConverterUtil\";\r\n\r\nclass ChargerController {\r\n\r\n\tprivate socket : Socket;\r\n\tprivate client : ModbusTCPClient;\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.socket = new Socket();\r\n\t\tthis.client = new ModbusTCPClient(this.socket);\r\n\t}\r\n\r\n\tpublic async testConnect() : Promise<void> {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tconsole.info(\" \");\r\n\t\t\tconst infoData : ChargerInfoData = await this.fetchChargerInfoData();\r\n\r\n\t\t\tconsole.info(\"SerialNumber: \"+infoData.getSerialNumber());\r\n\t\t\tconsole.info(\"Model: \"+infoData.getModel());\r\n\t\t\tconsole.info(\"HardwareVersion: \"+infoData.getHardwareVersion());\r\n\t\t\tconsole.info(\"SoftwareVersion: \"+infoData.getSoftwareVersion());\r\n\r\n\t\t\tconsole.info(\"NumberOfConnectors: \"+infoData.getNumberOfConnectors());\r\n\r\n\t\t\tconsole.info(\" \");\r\n\t\t\tconst connectorInfoData : ChargerConnectorInfoData = await this.fetchConnectorInfoData(1);\r\n\r\n\t\t\tconsole.info(\"ConnectorType: \"+connectorInfoData.getConnectorTypeAsString());\r\n\t\t\tconsole.info(\"NumberOfPhases: \"+connectorInfoData.getNumberOfPhases());\r\n\t\t\tconsole.info(\"L1ConnectedToPhase: \"+connectorInfoData.getL1ConnectedToPhase());\r\n\t\t\tconsole.info(\"L2ConnectedToPhase: \"+connectorInfoData.getL2ConnectedToPhase());\r\n\t\t\tconsole.info(\"L3ConnectedToPhase: \"+connectorInfoData.getL3ConnectedToPhase());\r\n\t\t\tconsole.info(\"CustomMaxCurrent: \"+connectorInfoData.getCustomMaxCurrent()+\" A\");\r\n\r\n\t\t\tconsole.info(\" \");\r\n\t\t\tconst connectorMeasementData : ChargerConnectorMeasurementData = await this.fetchConnectorMeasurementData(1);\r\n\r\n\t\t\tconsole.info(\"ConnectorStatus: \"+connectorMeasementData.getConnectorStatusAsString());\r\n\t\t\tconsole.info(\"MeasuredVehicleNumberOfPhases: \"+connectorMeasementData.getMeasuredVehicleNumberOfPhasesAsString());\r\n\t\t\tconsole.info(\"EvMaxPhaseCurrent: \"+connectorMeasementData.getEvMaxPhaseCurrent()+\" A\");\r\n\t\t\tconsole.info(\"TargetCurrentFromPowerMgm: \"+connectorMeasementData.getTargetCurrentFromPowerMgm()+\" A\");\r\n\t\t\tconsole.info(\"Frequency: \"+connectorMeasementData.getFrequency() + \" Hz\");\r\n\t\t\tconsole.info(\"VoltageL1: \"+connectorMeasementData.getVoltageL1() + \" V\");\r\n\t\t\tconsole.info(\"VoltageL2: \"+connectorMeasementData.getVoltageL2() + \" V\");\r\n\t\t\tconsole.info(\"VoltageL3: \"+connectorMeasementData.getVoltageL3() + \" V\");\r\n\t\t\tconsole.info(\"CurrentL1: \"+connectorMeasementData.getCurrentL1() + \" A\");\r\n\t\t\tconsole.info(\"CurrentL2: \"+connectorMeasementData.getCurrentL2() + \" A\");\r\n\t\t\tconsole.info(\"CurrentL3: \"+connectorMeasementData.getCurrentL3() + \" A\");\r\n\t\t\tconsole.info(\"ActivePowerL1: \"+connectorMeasementData.getActivePowerL1() + \" kWh\");\r\n\t\t\tconsole.info(\"ActivePowerL2: \"+connectorMeasementData.getActivePowerL2() + \" kWh\");\r\n\t\t\tconsole.info(\"ActivePowerL3: \"+connectorMeasementData.getActivePowerL3() + \" kWh\");\r\n\t\t\tconsole.info(\"ActivePowerTotal: \"+connectorMeasementData.getActivePowerTotal() + \" kWh\");\r\n\t\t\tconsole.info(\"PowerFactor: \"+connectorMeasementData.getPowerFactor());\r\n\t\t\tconsole.info(\"TotalImportedActiveEnergyInRunningSession: \"+connectorMeasementData.getTotalImportedActiveEnergyInRunningSession()+ \" kWh\");\r\n\t\t\tconsole.info(\"RunningSessionDuration: \"+connectorMeasementData.getRunningSessionDuration()+ \" seconds\");\r\n\t\t\tconsole.info(\"RunningSessionDepartureTime: \"+connectorMeasementData.getRunningSessionDepartureTime()+ \" seconds\");\r\n\t\t\tconsole.info(\"RunningSessionID: \"+connectorMeasementData.getRunningSessionID());\r\n\t\t\tconsole.info(\"EvMaxPower: \"+connectorMeasementData.getEvMaxPower()+ \" kW\");\r\n\t\t\tconsole.info(\"EvPlannedEnergy: \"+connectorMeasementData.getEvPlannedEnergy()+ \" kW\");\r\n\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tconsole.log(\"Error:\", e);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tpublic connect(ipAddress : string, port : number) : void {\r\n\r\n\t\tconst options: SocketConnectOpts = {\r\n\t\t\t\"host\": ipAddress,\r\n\t\t\t\"port\": port\r\n\t\t};\r\n\r\n\t\tthis.socket.on(\"connect\", this.testConnect.bind(this));\r\n\r\n\t\tthis.socket.connect(options);\r\n\t}\r\n\r\n\t//public on(event: \"connect\", listener: () => void) {\r\n\r\n\t//}\r\n\r\n\r\n\tprivate async fetchInputRegister(start : number, count : number) : Promise<number[]> {\r\n\r\n\t\tconst result : number[] = new Array<number>();\r\n\t\tawait this.client.readInputRegisters(start, count)\r\n\t\t\t.then(function (resp) {\r\n\t\t\t\t//console.log(resp);\r\n\r\n\t\t\t\tfor (let i  =0; i < resp.response.body.values.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] =  resp.response.body.values[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//socket.end();\r\n\t\t\t}).catch(function (...args) {\r\n\t\t\t\tconsole.error(args);\r\n\t\t\t\t//socket.end();\r\n\t\t\t})\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic async fetchChargerInfoData() : Promise<ChargerInfoData>\r\n\t{\r\n\t\tconst registerData : number[]  =  await this.fetchInputRegister(990, 31);\r\n\r\n\t\tconst data = new ChargerInfoData();\r\n\t\tdata.setSerialNumber(RegisterConverterUtil.getRegisterDataAsString(registerData, 0, 10));\r\n\t\tdata.setModel(RegisterConverterUtil.getRegisterDataAsString(registerData, 10, 10));\r\n\t\tdata.setHardwareVersion(RegisterConverterUtil.getRegisterDataAsString(registerData, 20, 5));\r\n\t\tdata.setSoftwareVersion(RegisterConverterUtil.getRegisterDataAsString(registerData, 25, 5));\r\n\t\tdata.setNumberOfConnectors(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 30));\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tpublic async fetchConnectorInfoData(num : number) : Promise<ChargerConnectorInfoData>\r\n\t{\r\n\t\tconst registerData : number[]  =  await this.fetchInputRegister(1022 + (num-1) * 100, 8);\r\n\r\n\t\tconst data = new ChargerConnectorInfoData();\r\n\t\tdata.setConnectorType(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 0));\r\n\t\tdata.setNumberOfPhases(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 1));\r\n\t\tdata.setL1ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 2));\r\n\t\tdata.setL2ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 3));\r\n\t\tdata.setL3ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 4));\r\n\t\tdata.setCustomMaxCurrent(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 6));\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tpublic async fetchConnectorMeasurementData(num : number) : Promise<ChargerConnectorMeasurementData>\r\n\t{\r\n\t\tconst registerData : number[]  =  await this.fetchInputRegister(0 + (num-1) * 100, 48);\r\n\r\n\t\tconst data = new ChargerConnectorMeasurementData();\r\n\t\tdata.setConnectorStatus(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 0));\r\n\t\tdata.setMeasuredVehicleNumberOfPhases(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 1));\r\n\t\tdata.setEvMaxPhaseCurrent(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 2));\r\n\t\tdata.setTargetCurrentFromPowerMgm(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 4));\r\n\t\tdata.setFrequency(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 6));\r\n\t\tdata.setVoltageL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 8));\r\n\t\tdata.setVoltageL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 10));\r\n\t\tdata.setVoltageL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 12));\r\n\t\tdata.setCurrentL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 14));\r\n\t\tdata.setCurrentL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 16));\r\n\t\tdata.setCurrentL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 18));\r\n\t\tdata.setActivePowerL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 20));\r\n\t\tdata.setActivePowerL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 22));\r\n\t\tdata.setActivePowerL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 24));\r\n\t\tdata.setActivePowerTotal(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 26));\r\n\t\tdata.setPowerFactor(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 28));\r\n\t\tdata.setTotalImportedActiveEnergyInRunningSession(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 30));\r\n\t\tdata.setRunningSessionDuration(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 32));\r\n\t\tdata.setRunningSessionDepartureTime(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 36));\r\n\t\tdata.setRunningSessionID(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 40));\r\n\t\tdata.setEvMaxPower(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 44));\r\n\t\tdata.setEvPlannedEnergy(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 46));\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n}\r\n\r\nexport { ChargerController };"],
  "mappings": "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",
  "names": []
}
