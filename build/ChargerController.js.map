{
  "version": 3,
  "sources": ["../src/ChargerController.ts"],
  "sourcesContent": ["import { ModbusTCPClient } from 'jsmodbus'\r\nimport { Socket, SocketConnectOpts } from 'net'\r\n\r\nimport { ChargerInfoData } from \"./ChargerInfoData\";\r\nimport { ChargerConnectorInfoData } from \"./ChargerConnectorInfoData\";\r\nimport { ChargerConnectorMeasurementData } from \"./ChargerConnectorMeasurementData\";\r\nimport  {RegisterConverterUtil } from \"./RegisterConverterUtil\";\r\n\r\nclass ChargerController {\r\n\r\n    private socket : Socket;\r\n    private client : ModbusTCPClient;\r\n\r\n    constructor() {\r\n\r\n        this.socket = new Socket();\r\n        this.client = new ModbusTCPClient(this.socket);\r\n    }\r\n    \r\n    public async testConnect() {\r\n\r\n        try {\r\n\r\n            console.info(\" \");\r\n            let infoData : ChargerInfoData = await this.fetchChargerInfoData();\r\n            \r\n            console.info(\"SerialNumber: \"+infoData.getSerialNumber());\r\n            console.info(\"Model: \"+infoData.getModel());\r\n            console.info(\"HardwareVersion: \"+infoData.getHardwareVersion());\r\n            console.info(\"SoftwareVersion: \"+infoData.getSoftwareVersion());\r\n\r\n            console.info(\"NumberOfConnectors: \"+infoData.getNumberOfConnectors());\r\n\r\n            console.info(\" \");\r\n            let connectorInfoData : ChargerConnectorInfoData = await this.fetchConnectorInfoData(1);\r\n            \r\n            console.info(\"ConnectorType: \"+connectorInfoData.getConnectorTypeAsString());\r\n            console.info(\"NumberOfPhases: \"+connectorInfoData.getNumberOfPhases());\r\n            console.info(\"L1ConnectedToPhase: \"+connectorInfoData.getL1ConnectedToPhase());\r\n            console.info(\"L2ConnectedToPhase: \"+connectorInfoData.getL2ConnectedToPhase());\r\n            console.info(\"L3ConnectedToPhase: \"+connectorInfoData.getL3ConnectedToPhase());\r\n            console.info(\"CustomMaxCurrent: \"+connectorInfoData.getCustomMaxCurrent()+\" A\");\r\n            \r\n            console.info(\" \");\r\n            let connectorMeasementData : ChargerConnectorMeasurementData = await this.fetchConnectorMeasurementData(1);\r\n\r\n            console.info(\"ConnectorStatus: \"+connectorMeasementData.getConnectorStatusAsString());\r\n            console.info(\"MeasuredVehicleNumberOfPhases: \"+connectorMeasementData.getMeasuredVehicleNumberOfPhasesAsString());\r\n            console.info(\"EvMaxPhaseCurrent: \"+connectorMeasementData.getEvMaxPhaseCurrent()+\" A\");\r\n            console.info(\"TargetCurrentFromPowerMgm: \"+connectorMeasementData.getTargetCurrentFromPowerMgm()+\" A\");\r\n            console.info(\"Frequency: \"+connectorMeasementData.getFrequency() + \" Hz\");\r\n            console.info(\"VoltageL1: \"+connectorMeasementData.getVoltageL1() + \" V\");\r\n            console.info(\"VoltageL2: \"+connectorMeasementData.getVoltageL2() + \" V\");\r\n            console.info(\"VoltageL3: \"+connectorMeasementData.getVoltageL3() + \" V\");\r\n            console.info(\"CurrentL1: \"+connectorMeasementData.getCurrentL1() + \" A\");\r\n            console.info(\"CurrentL2: \"+connectorMeasementData.getCurrentL2() + \" A\");\r\n            console.info(\"CurrentL3: \"+connectorMeasementData.getCurrentL3() + \" A\");\r\n            console.info(\"ActivePowerL1: \"+connectorMeasementData.getActivePowerL1() + \" kWh\");\r\n            console.info(\"ActivePowerL2: \"+connectorMeasementData.getActivePowerL2() + \" kWh\");\r\n            console.info(\"ActivePowerL3: \"+connectorMeasementData.getActivePowerL3() + \" kWh\");\r\n            console.info(\"ActivePowerTotal: \"+connectorMeasementData.getActivePowerTotal() + \" kWh\");\r\n            console.info(\"PowerFactor: \"+connectorMeasementData.getPowerFactor());\r\n            console.info(\"TotalImportedActiveEnergyInRunningSession: \"+connectorMeasementData.getTotalImportedActiveEnergyInRunningSession()+ \" kWh\");\r\n            console.info(\"RunningSessionDuration: \"+connectorMeasementData.getRunningSessionDuration()+ \" seconds\");\r\n            console.info(\"RunningSessionDepartureTime: \"+connectorMeasementData.getRunningSessionDepartureTime()+ \" seconds\");\r\n            console.info(\"RunningSessionID: \"+connectorMeasementData.getRunningSessionID());\r\n            console.info(\"EvMaxPower: \"+connectorMeasementData.getEvMaxPower()+ \" kW\");\r\n            console.info(\"EvPlannedEnergy: \"+connectorMeasementData.getEvPlannedEnergy()+ \" kW\");\r\n            \r\n        } \r\n        catch (e) {\r\n            console.log('Error:', e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public connect(ipAddress : string, port : number) : void {\r\n\r\n        let options: SocketConnectOpts = {\r\n            'host': ipAddress,\r\n            'port': port\r\n        };\r\n        \r\n        this.socket.on(\"connect\", this.testConnect.bind(this));\r\n\r\n        this.socket.connect(options);\r\n    }\r\n\r\n    public on(event: 'connect', listener: () => void) {\r\n\r\n    }\r\n\r\n\r\n    private async fetchInputRegister(start : number, count : number) : Promise<number[]> {\r\n\r\n        let result : number[] = new Array<number>();\r\n        let modbusResponse = await this.client.readInputRegisters(start, count)\r\n        .then(function (resp) {\r\n          //console.log(resp);\r\n\r\n            for (let i : number =0; i < resp.response.body.values.length; i++) \r\n            {\r\n                result[i] =  resp.response.body.values[i];\r\n            }\r\n                  \r\n          //socket.end();\r\n        }).catch(function () {\r\n          console.error(arguments);\r\n          //socket.end();\r\n        })\r\n\r\n        return result;\r\n    }\r\n\r\n    public async fetchChargerInfoData() : Promise<ChargerInfoData> \r\n    {\r\n        let registerData : number[]  =  await this.fetchInputRegister(990, 31);\r\n               \r\n        let data = new ChargerInfoData();\r\n        data.setSerialNumber(RegisterConverterUtil.getRegisterDataAsString(registerData, 0, 10));\r\n        data.setModel(RegisterConverterUtil.getRegisterDataAsString(registerData, 10, 10));\r\n        data.setHardwareVersion(RegisterConverterUtil.getRegisterDataAsString(registerData, 20, 5));\r\n        data.setSoftwareVersion(RegisterConverterUtil.getRegisterDataAsString(registerData, 25, 5));\r\n        data.setNumberOfConnectors(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 30));\r\n\r\n        return data;\r\n    }\r\n\r\n    public async fetchConnectorInfoData(num : number) : Promise<ChargerConnectorInfoData> \r\n    {\r\n        let registerData : number[]  =  await this.fetchInputRegister(1022 + (num-1) * 100, 8);\r\n\r\n        let data = new ChargerConnectorInfoData();\r\n        data.setConnectorType(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 0));\r\n        data.setNumberOfPhases(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 1));\r\n        data.setL1ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 2));\r\n        data.setL2ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 3));\r\n        data.setL3ConnectedToPhase(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 4));\r\n        data.setCustomMaxCurrent(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 6));\r\n\r\n        return data;\r\n    }\r\n\r\n    public async fetchConnectorMeasurementData(num : number) : Promise<ChargerConnectorMeasurementData> \r\n    {\r\n        let registerData : number[]  =  await this.fetchInputRegister(0 + (num-1) * 100, 48);\r\n\r\n        let data = new ChargerConnectorMeasurementData();\r\n        data.setConnectorStatus(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 0));\r\n        data.setMeasuredVehicleNumberOfPhases(RegisterConverterUtil.getRegisterDataAsInt16(registerData, 1));\r\n        data.setEvMaxPhaseCurrent(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 2));\r\n        data.setTargetCurrentFromPowerMgm(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 4));\r\n        data.setFrequency(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 6));\r\n        data.setVoltageL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 8));\r\n        data.setVoltageL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 10));\r\n        data.setVoltageL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 12));\r\n        data.setCurrentL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 14));\r\n        data.setCurrentL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 16));\r\n        data.setCurrentL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 18));\r\n        data.setActivePowerL1(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 20));\r\n        data.setActivePowerL2(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 22));\r\n        data.setActivePowerL3(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 24));\r\n        data.setActivePowerTotal(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 26));\r\n        data.setPowerFactor(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 28));\r\n        data.setTotalImportedActiveEnergyInRunningSession(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 30));\r\n        data.setRunningSessionDuration(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 32));\r\n        data.setRunningSessionDepartureTime(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 36));\r\n        data.setRunningSessionID(RegisterConverterUtil.getRegisterDataAsInt64(registerData, 40));\r\n        data.setEvMaxPower(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 44));\r\n        data.setEvPlannedEnergy(RegisterConverterUtil.getRegisterDataAsFloat32(registerData, 46));\r\n\r\n        return data;\r\n    }\r\n\r\n}\r\n\r\nexport { ChargerController };"],
  "mappings": "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",
  "names": []
}
