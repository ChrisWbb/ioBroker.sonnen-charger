{
  "version": 3,
  "sources": ["../src/RegisterConverterUtil.ts"],
  "sourcesContent": ["class RegisterConverterUtil {\r\n\r\n\tpublic static int16ArrayToByteArray(intArray : number[]) : number[]\r\n\t{\r\n\t\tconst result = new Array<number>();\r\n\r\n\t\tfor (let i = 0; i < intArray.length; i++) {\r\n\r\n\t\t\tconst lowByte =  (intArray[i] & 0xff);\r\n\t\t\tconst highByte = ((intArray[i] >> 8) & 0xff);\r\n\r\n\t\t\tresult[((intArray.length) - i) * 2 - 1] = highByte;\r\n\t\t\tresult[((intArray.length) - i) * 2 - 2] = lowByte;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static int16ArrayToFloat32(intArray : number[]) : number\r\n\t{\r\n\t\tconst byteArray = new Array<number>(4);\r\n\t\tbyteArray[3] = (intArray[1] & 0xff);\r\n\t\tbyteArray[2] = ((intArray[1] >> 8) & 0xff);\r\n\t\tbyteArray[1] = (intArray[0] & 0xff);\r\n\t\tbyteArray[0] = ((intArray[0] >> 8) & 0xff);\r\n\r\n\t\treturn new Float32Array(new Uint8Array([byteArray[3], byteArray[2], byteArray[1], byteArray[0]]).buffer)[0];\r\n\t}\r\n\r\n\tpublic static byteArrayToNumber(byteArray: number[]) : number\r\n\t{\r\n\t\tlet value  = 0;\r\n\t\tfor ( let i = byteArray.length - 1; i >= 0; i--) {\r\n\t\t\tvalue = (value * 256) + byteArray[i];\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tprivate static byteArrayToString(byteArray : number[]) : string\r\n\t{\r\n\t\tlet result  = \"\";\r\n\r\n\t\tfor (let i = byteArray.length-1; i >= 0 ; i--) {\r\n\t\t\tif (byteArray[i] > 0) {\r\n\t\t\t\tresult += String.fromCharCode(byteArray[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static int64ToByteArray(long : number) : number[] {\r\n\r\n\t\tconst byteArray = [0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n\t\tfor ( let index = 0; index < byteArray.length; index ++ ) {\r\n\t\t\tconst byte = long & 0xff;\r\n\t\t\tbyteArray [ index ] = byte;\r\n\t\t\tlong = (long - byte) / 256 ;\r\n\t\t}\r\n\t\treturn byteArray;\r\n\t}\r\n\r\n\tpublic static int64ToInt16Array(int64 : number) : number[] {\r\n\r\n\t\tconst int16Array: number[] = [];\r\n\r\n\t\tfor (let i = 48; i >= 0; i -= 16) {\r\n\t\t\tconst chunk = Number((BigInt(int64) >> BigInt(i)) & BigInt(0xffff));\r\n\t\t\tint16Array.push(chunk);\r\n\t\t}\r\n\r\n\t\treturn int16Array;\r\n\t}\r\n\r\n\tpublic static float32ToInt16Array(float32: number) : number[] {\r\n\r\n\t\tconst float32Array = new Float32Array(1);\r\n\t\tfloat32Array[0] = float32;\r\n\t\tconst int16Array = new Uint16Array(float32Array.buffer)\r\n\r\n\t\treturn [int16Array[1], int16Array[0]];\r\n\t}\r\n\r\n\tpublic static getRegisterData(array : number[] | Buffer | Uint16Array, start : number, length : number) : number[]\r\n\t{\r\n\t\tconst result = new Array<number>(length);\r\n\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tresult[i] = array[start+i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static getRegisterDataAsString(array : number[] | Buffer | Uint16Array, start : number, length : number) : string\r\n\t{\r\n\t\tconst intArray : number[] = this.getRegisterData(array, start, length);\r\n\t\treturn this.byteArrayToString(this.int16ArrayToByteArray(intArray));\r\n\t}\r\n\r\n\t// int64 4 Register\r\n\tpublic static getRegisterDataAsInt64(array : number[] | Buffer | Uint16Array, start : number) : number\r\n\t{\r\n\t\tconst intArray : number[] = this.getRegisterData(array, start, 4);\r\n\t\treturn this.byteArrayToNumber(this.int16ArrayToByteArray(intArray));\r\n\t}\r\n\r\n\t// int32 2 Register\r\n\tpublic static getRegisterDataAsInt32(array : number[] | Buffer | Uint16Array, start : number) : number\r\n\t{\r\n\t\tconst intArray : number[] = this.getRegisterData(array, start, 2);\r\n\t\treturn this.byteArrayToNumber(this.int16ArrayToByteArray(intArray));\r\n\t}\r\n\r\n\t// int16 1 Register\r\n\tpublic static getRegisterDataAsInt16(array : number[] | Buffer | Uint16Array, start : number) : number\r\n\t{\r\n\t\tconst intArray : number[] = this.getRegisterData(array, start, 1);\r\n\t\treturn intArray[0];\r\n\t}\r\n\r\n\t// float32 2 Register\r\n\tpublic static getRegisterDataAsFloat32(array : number[] | Buffer | Uint16Array, start : number) : number\r\n\t{\r\n\t\tconst intArray : number[] = this.getRegisterData(array, start, 2);\r\n\t\treturn this.int16ArrayToFloat32(intArray);\r\n\t}\r\n\r\n}\r\n\r\nexport {RegisterConverterUtil}"],
  "mappings": "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",
  "names": []
}
