{
  "version": 3,
  "sources": ["../src/RegisterConverterUtil.ts"],
  "sourcesContent": ["class RegisterConverterUtil {\r\n\r\n    private static intArrayToByteArray(intArray : number[]) : number[]\r\n    {\r\n        let result = new Array<number>();\r\n    \r\n        for (let i = 0; i < intArray.length; i++) {\r\n    \r\n            let lowByte =  (intArray[i] & 0xff);\r\n            let highByte = ((intArray[i] >> 8) & 0xff);\r\n    \r\n            result[((intArray.length) - i) * 2 - 1] = highByte;\r\n            result[((intArray.length) - i) * 2 - 2] = lowByte;\r\n          }\r\n    \r\n        return result;\r\n    }\r\n    \r\n    private static intArrayToFloat32(intArray : number[]) : number\r\n    {\r\n        let byteArray = new Array<number>(4);\r\n        byteArray[3] = (intArray[1] & 0xff);\r\n        byteArray[2] = ((intArray[1] >> 8) & 0xff);\r\n        byteArray[1] = (intArray[0] & 0xff);\r\n        byteArray[0] = ((intArray[0] >> 8) & 0xff);\r\n\r\n        return new Float32Array(new Uint8Array([byteArray[3], byteArray[2], byteArray[1], byteArray[0]]).buffer)[0]; \r\n    }\r\n\r\n    private static byteArrayToNumber(byteArray: number[]) : number\r\n    {\r\n        let value : number = 0;\r\n        for ( var i = byteArray.length - 1; i >= 0; i--) {\r\n            value = (value * 256) + byteArray[i];\r\n        }\r\n    \r\n        return value;\r\n    };\r\n\r\n    private static byteArrayToString(byteArray : number[]) : string\r\n    {\r\n        let result : string = \"\";\r\n    \r\n        for (let i = byteArray.length-1; i >= 0 ; i--) { \r\n            if (byteArray[i] > 0) {\r\n                result += String.fromCharCode(byteArray[i]);\r\n            }\r\n        }\r\n    \r\n        return result;\r\n    }\r\n\r\n    private static getRegisterData(array : number[], start : number, length : number) : number[] \r\n    {\r\n        let result = new Array<number>(length);\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            result[i] = array[start+i];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static getRegisterDataAsString(array : number[], start : number, length : number) : string \r\n    {\r\n        let intArray : number[] = this.getRegisterData(array, start, length);\r\n        return this.byteArrayToString(this.intArrayToByteArray(intArray));\r\n    }\r\n\r\n    // int64 4 Register\r\n    public static getRegisterDataAsInt64(array : number[], start : number) : number \r\n    {\r\n        let intArray : number[] = this.getRegisterData(array, start, 4);\r\n        return this.byteArrayToNumber(this.intArrayToByteArray(intArray));\r\n    }\r\n\r\n    // int32 2 Register\r\n    public static getRegisterDataAsInt32(array : number[], start : number) : number \r\n    {\r\n        let intArray : number[] = this.getRegisterData(array, start, 2);\r\n        return this.byteArrayToNumber(this.intArrayToByteArray(intArray));\r\n    }\r\n\r\n    // int16 1 Register\r\n    public static getRegisterDataAsInt16(array : number[], start : number) : number \r\n    {\r\n        let intArray : number[] = this.getRegisterData(array, start, 1);\r\n        return intArray[0];\r\n    }\r\n\r\n    // float32 2 Register\r\n    public static getRegisterDataAsFloat32(array : number[], start : number) : number \r\n    {\r\n        let intArray : number[] = this.getRegisterData(array, start, 2);\r\n        return this.intArrayToFloat32(intArray);\r\n    }\r\n\r\n}\r\n\r\nexport {RegisterConverterUtil}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAM,sBAAsB;AAAA,EAExB,OAAe,oBAAoB,UACnC;AACI,QAAI,SAAS,IAAI,MAAc;AAE/B,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AAEtC,UAAI,UAAY,SAAS,KAAK;AAC9B,UAAI,WAAa,SAAS,MAAM,IAAK;AAErC,cAAS,SAAS,SAAU,KAAK,IAAI,KAAK;AAC1C,cAAS,SAAS,SAAU,KAAK,IAAI,KAAK;AAAA,IAC5C;AAEF,WAAO;AAAA,EACX;AAAA,EAEA,OAAe,kBAAkB,UACjC;AACI,QAAI,YAAY,IAAI,MAAc,CAAC;AACnC,cAAU,KAAM,SAAS,KAAK;AAC9B,cAAU,KAAO,SAAS,MAAM,IAAK;AACrC,cAAU,KAAM,SAAS,KAAK;AAC9B,cAAU,KAAO,SAAS,MAAM,IAAK;AAErC,WAAO,IAAI,aAAa,IAAI,WAAW,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE;AAAA,EAC7G;AAAA,EAEA,OAAe,kBAAkB,WACjC;AACI,QAAI,QAAiB;AACrB,aAAU,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,cAAS,QAAQ,MAAO,UAAU;AAAA,IACtC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAe,kBAAkB,WACjC;AACI,QAAI,SAAkB;AAEtB,aAAS,IAAI,UAAU,SAAO,GAAG,KAAK,GAAI,KAAK;AAC3C,UAAI,UAAU,KAAK,GAAG;AAClB,kBAAU,OAAO,aAAa,UAAU,EAAE;AAAA,MAC9C;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAe,gBAAgB,OAAkB,OAAgB,QACjE;AACI,QAAI,SAAS,IAAI,MAAc,MAAM;AAErC,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,aAAO,KAAK,MAAM,QAAM;AAAA,IAC5B;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,wBAAwB,OAAkB,OAAgB,QACxE;AACI,QAAI,WAAsB,KAAK,gBAAgB,OAAO,OAAO,MAAM;AACnE,WAAO,KAAK,kBAAkB,KAAK,oBAAoB,QAAQ,CAAC;AAAA,EACpE;AAAA,EAGA,OAAc,uBAAuB,OAAkB,OACvD;AACI,QAAI,WAAsB,KAAK,gBAAgB,OAAO,OAAO,CAAC;AAC9D,WAAO,KAAK,kBAAkB,KAAK,oBAAoB,QAAQ,CAAC;AAAA,EACpE;AAAA,EAGA,OAAc,uBAAuB,OAAkB,OACvD;AACI,QAAI,WAAsB,KAAK,gBAAgB,OAAO,OAAO,CAAC;AAC9D,WAAO,KAAK,kBAAkB,KAAK,oBAAoB,QAAQ,CAAC;AAAA,EACpE;AAAA,EAGA,OAAc,uBAAuB,OAAkB,OACvD;AACI,QAAI,WAAsB,KAAK,gBAAgB,OAAO,OAAO,CAAC;AAC9D,WAAO,SAAS;AAAA,EACpB;AAAA,EAGA,OAAc,yBAAyB,OAAkB,OACzD;AACI,QAAI,WAAsB,KAAK,gBAAgB,OAAO,OAAO,CAAC;AAC9D,WAAO,KAAK,kBAAkB,QAAQ;AAAA,EAC1C;AAEJ;",
  "names": []
}
